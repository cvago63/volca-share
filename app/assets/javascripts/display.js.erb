function Display(element) {
  this.element = element;
  this.constructDisplayString = function(value, pitch, octave) {
    var displayString, thousands, hundreds, tens, ones, tensString;
    tensString = '' + (Math.abs(value) / 100);
    if (pitch === true) {
      if (value < 0) {
        thousands = 'dash';
      } else {
        thousands = 'blank';
      }

      value = Math.abs(value);
      if (value >= 100 && value < 1000) {
        ones = 'n';
        tens = tensString[0];
        hundreds = '0';
      } else if (value >= 1000) {
        ones = 'n';
        tens = ('' + value)[1];
        hundreds = ('' + value)[0];
      } else if (value < 100 && value >= 10) {
        ones = 'c';
        tens = ('' + value)[1];
        hundreds = ('' + value)[0]
      } else if (value < 10) {
        ones = 'c';
        tens = ('' + value)[0];
        hundreds = '0'
      }
      displayString = [thousands, hundreds, tens, ones];

      if (value === 0 ) {
        displayString = 'blank o f f'.split(' ');
      }
    } else if (octave) {
      // TODO show oct1-6 on display
    } else {
      thousands = 'blank';
      if (value > 99) {
        hundreds = ('' + value)[0];
        tens = ('' + value)[1];
        ones = ('' + value)[2];
      } else if (value > 9) {
        hundreds = 'blank';
        tens = ('' + value)[0];
        ones = ('' + value)[1];
      } else {
        hundreds = 'blank';
        tens = 'blank';
        ones = '' + value;
      }
      displayString = [thousands, hundreds, tens, ones];
    }

    return displayString;
  }

  this.update = function(midi, pitch, octave){
    var displayValue, letter, thousands, hundreds, tens, ones;
    if (pitch) {
      displayValue = this.vcoPitchValues[midi];
    } else {
      displayValue = midi;
    }
    displayString = this.constructDisplayString(displayValue, pitch, octave);

    this.digit1.setSprite(displayString[0]);
    $(this.digit1.element).css('background-position', this.calculateClockOffset(displayString[0], 1) + '% 0');
    this.digit2.setSprite(displayString[1]);
    $(this.digit2.element).css('background-position', this.calculateClockOffset(displayString[1], 1) + '% 0');
    this.digit3.setSprite(displayString[2]);
    $(this.digit3.element).css('background-position', this.calculateClockOffset(displayString[2], 1) + '% 0');
    this.digit4.setSprite(displayString[3]);
    $(this.digit4.element).css('background-position', this.calculateClockOffset(displayString[3], 1) + '% 0');
  }

  function Digit(element) {
    this.element = element;
    this.setSprite = function(character) {
      if (character != 'blank' && isNaN(character)) {
        $(this.element).css('background-image', 'url(<%= asset_path("symbols.jpg") %>)');
        $(this.element).css('background-size', '500%');
      } else {
        $(this.element).css('background-image', 'url(<%= asset_path("numbers.jpg") %>)');
        $(this.element).css('background-size', '1120%');
      }
    }
  }

  this.digit1 = new Digit($('#thousands'));
  this.digit2 = new Digit($('#hundreds'));
  this.digit3 = new Digit($('#tens'));
  this.digit4 = new Digit($('#ones'));

  this.vcoPitchValues = [
    -1200,-1200,-1100,-1000,-900,-800,-700,-600,-500,-400,-300,-200,-100,-96,-92,-88,
    -84,-80,-78,-76,-74,-72,-70,-68,-66,-64,-62,-60,-58,-56,-54,-52,-50,-48,-46,
    -44,-42,-40,-38,-36,-34,-32,-30,-28,-26,-24,-22,-20,-18,-16,-14,-12,-10,-8,
    -6,-4,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
    28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
    78,80,84,88,92,96,100,200,300,400,500,600,700,800,900,1000,1100,1200,1200
  ];

  this.calculateClockOffset = function(value, place) {
    var mapping = {}, midiString, digit;
    midiString = '' + value;
    digit = midiString[midiString.length - place];
    mapping = {
      'dash' : -2.5,
      'c' : 24,
      'n' : 49,
      'o' : 74,
      'f' : 100,
      'blank' : 99.2
    };
    return mapping[value] || parseInt(digit, 10) * 9.98;
  };
}
