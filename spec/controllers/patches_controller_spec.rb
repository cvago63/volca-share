require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PatchesController, type: :controller do
  login_user
  # This should return the minimal set of attributes required to create a valid
  # Patch. As you add validations to Patch, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    attributes_for(:patch)
  end

  let(:invalid_attributes) do
    attributes_for(:patch, attack: 'bort' )
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PatchesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all patches as @patches' do
      patch = Patch.create! valid_attributes
      get :index
      expect(assigns(:patches)).to eq([patch])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested patch as @patch' do
      patch = Patch.create! valid_attributes
      get :show, { id: patch.to_param }, valid_session
      expect(assigns(:patch)).to eq(patch)
    end
  end

  describe 'GET #new' do
    it 'assigns a new patch as @patch' do
      get :new, {}, valid_session
      expect(assigns(:patch)).to be_a_new(VolcaShare::PatchViewModel)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested patch as @patch' do
      patch = create(:patch)
      get :edit, { id: patch.to_param }, valid_session
      expect(assigns(:patch)).to eq(patch)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Patch' do
        expect do
          post :create, { patch: valid_attributes }, valid_session
        end.to change(Patch, :count).by(1)
      end

      it 'assigns a newly created patch as @patch' do
        post :create, { patch: valid_attributes }, valid_session
        expect(assigns(:patch)).to be_a(Patch)
        expect(assigns(:patch)).to be_persisted
      end

      it 'redirects to the created patch' do
        post :create, { patch: valid_attributes }, valid_session
        expect(response).to redirect_to(edit_patch_url(Patch.last))
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved patch as @patch' do
        post :create, { patch: invalid_attributes }, valid_session
        expect(assigns(:patch)).to be_a_new(Patch)
      end

      it "re-renders the 'new' template" do
        post :create, { patch: invalid_attributes }, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        attributes_for(:patch, name: 'New Weird Patch')
      end

      it 'updates the requested patch' do
        patch = Patch.create! valid_attributes
        put :update, { id: patch.to_param, patch: new_attributes }, valid_session
        patch.reload
        expect(patch.name).to eq(new_attributes[:name])
      end

      it 'assigns the requested patch as @patch' do
        patch = Patch.create! valid_attributes
        put :update, { id: patch.to_param, patch: valid_attributes }, valid_session
        expect(assigns(:patch)).to eq(patch)
      end

      it 'redirects to the patch' do
        patch = Patch.create! valid_attributes
        put :update, { id: patch.to_param, patch: valid_attributes }, valid_session
        expect(response).to redirect_to(patch)
      end
    end

    context 'with invalid params' do
      it 'assigns the patch as @patch' do
        patch = Patch.create! valid_attributes
        put :update, { id: patch.to_param, patch: invalid_attributes }, valid_session
        expect(assigns(:patch)).to eq(patch)
      end

      it "re-renders the 'edit' template" do
        patch = Patch.create! valid_attributes
        put :update, { id: patch.to_param, patch: invalid_attributes }, valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    context 'user is author' do
      it 'destroys the requested patch' do
        patch = Patch.create! valid_attributes.merge(user_id: User.first.id)
        expect do
          delete :destroy, { id: patch.to_param }, valid_session
        end.to change(Patch, :count).by(-1)
      end

      it 'redirects to the patches list' do
        patch = Patch.create! valid_attributes.merge(user_id: User.first.id)
        delete :destroy, { id: patch.to_param }, valid_session
        expect(response).to redirect_to(patches_url)
      end
    end

    context 'user is not author' do
      it 'disallows non-author to destroy' do
        patch = Patch.create! valid_attributes.merge(user_id: 'abc123')
        delete :destroy, { id: patch.to_param }, valid_session
        expect(response).to redirect_to(patch_url(patch))
      end
    end
  end
end
