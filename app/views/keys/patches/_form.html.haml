
.field
  = label_tag :name, 'Patch name', class: 'sr-only'

  = text_field_tag 'patch[name]',
                   @patch.name,
                   class: 'form-control-lg col-lg-12',
                   required: true,
                   placeholder: 'Patch name'

#interface.col-lg-9.form
  .stretchy
    .volca.keys
      .small.knob.first-row.vco-column.lit#detune
        .notch
      .small.knob.second-row.vco-column.lit#portamento
        .notch
      .small.knob.third-row.vco-column.lit#vco-eg-int
        .notch
      .small.knob.first-row.vcf-column.lit#cutoff
        .notch
      .small.knob.second-row.vcf-column.lit#peak
        .notch
      .small.knob.third-row.vcf-column.lit#vcf-eg-int
        .notch
      .small.knob.first-row.lfo-column.lit#rate
        .notch
      .small.knob.second-row.lfo-column.lit#pitch-int
        .notch
      .small.knob.third-row.lfo-column.lit#cutoff-int
        .notch
      .small.knob.first-row.eg-column.lit#attack
        .notch
      .small.knob.second-row.eg-column.lit#decay-release
        .notch
      .small.knob.third-row.eg-column.lit#sustain
        .notch
      .knob.dark#voice
        .notch
      .knob.dark#octave
        .notch
      .small.knob.unlit#delay-time
        .notch
      .small.knob.unlit#delay-feedback
        .notch

      .bottom-row
        .placeholder
        .placeholder
        .placeholder

        -# LFO SHAPE SAW
        = radio_button_tag 'patch[lfo_shape]',
                           'saw',
                           @patch.lfo_shape_saw,
                           class: :control
        = label_tag('patch[lfo_shape_saw]') do
          %span.multi
            .light{ id: 'lfo_shape_saw_light',
                    data: { radio: true },
                    class: @patch.lfo_shape_saw ? 'lit' : '' }


        -# LFO SHAPE TRI
        = radio_button_tag 'patch[lfo_shape]',
                           'triangle',
                           @patch.lfo_shape_tri,
                           class: :control
        = label_tag('patch[lfo_shape_triangle]') do
          %span.multi
            .light{ id: 'lfo_shape_triangle_light',
                    data: { radio: true },
                    class: @patch.lfo_shape_tri ? 'lit' : '' }

        -# LFO SHAPE SQUARE
        = radio_button_tag 'patch[lfo_shape]',
                           'square',
                           @patch.lfo_shape_square,
                           class: :control
        = label_tag('patch[lfo_shape_square]') do
          %span.multi
            .light{ id: 'lfo_shape_square_light',
                    data: { radio: true },
                    class: @patch.lfo_shape_square ? 'lit' : '' }

        -# LFO TRIGGER SYNC
        = check_box :patch,
                    :lfo_trigger_sync,
                    @patch.checked?('lfo_trigger_sync'),
                    'true',
                    'false'
        = label_tag('patch[lfo_trigger_sync]') do
          %span.on-off
            .light{ id: 'lfo_trigger_sync_light',
                    class: @patch.lit?(:lfo_trigger_sync) }

        -# TEMPO PLACEHOLDERS
        .placeholder
        .placeholder
        .placeholder

        -# METRONOME
        .placeholder

        -# STEP TRIGGER
        = check_box :patch,
                    :step_trigger,
                    @patch.checked?('step_trigger'),
                    'true',
                    'false'
        = label_tag('patch[step_trigger]') do
          %span.on-off
            .light{ id: 'step_trigger_light',
                    class: @patch.lit?(:step_trigger) }

        -# TEMPO DELAY
        = check_box :patch,
                    :tempo_delay,
                    @patch.checked?('tempo_delay'),
                    'true',
                    'false'
        = label_tag('patch[tempo_delay]') do
          %span.on-off
            .light{ id: 'tempo_delay_light',
                    class: @patch.lit?(:tempo_delay) }

.col-lg-3.col-md-9#patch-metadata
  %fieldset
    .field
      = label_tag 'patch[notes]', 'Notes', class: 'sr-only'
      = text_area_tag 'patch[notes]', @patch.notes, size: '30x5', class: 'form-control', placeholder: 'Description'


  = range_field_tag 'patch[voice]', (@patch.voice || 57), in: 0..127, class: :hidden
  = range_field_tag 'patch[octave]', (@patch.octave || 57), in: 0..127, class: :hidden
  = range_field_tag 'patch[detune]', (@patch.detune || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[portamento]', (@patch.portamento || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[vco_eg_int]', (@patch.vco_eg_int || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[cutoff]', (@patch.cutoff || 63), in: 0..127, class: :hidden
  = range_field_tag 'patch[peak]', (@patch.peak || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[vcf_eg_int]', (@patch.vcf_eg_int || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[lfo_rate]', (@patch.lfo_rate || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[lfo_pitch_int]', (@patch.lfo_pitch_int || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[lfo_cutoff_int]', (@patch.lfo_cutoff_int || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[attack]', (@patch.attack || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[decay_release]', (@patch.decay_release || 63), in: 0..127, class: :hidden
  = range_field_tag 'patch[sustain]', (@patch.sustain || 127), in: 0..127, class: :hidden
  = range_field_tag 'patch[delay_time]', (@patch.delay_time || 127), in: 0..127, class: :hidden
  = range_field_tag 'patch[delay_feedback]', (@patch.delay_feedback || 127), in: 0..127, class: :hidden

#save_or_cancel.col-sm-12
  .actions
    = submit_tag 'Save', class: 'btn btn-primary'
