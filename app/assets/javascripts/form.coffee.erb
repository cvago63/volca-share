VS.Form = ->
  # TODO do page specific scripts the right way
  return if $('body.form').length == 0
  scope = @
  midi = undefined
  midiOut = VS.midiOut
  display = VS.display
  limit = 140
  sequences = VS.sequences

  #
  # initialize
  #
  lightButtons = ->
    $('.button').each ->
      if $(this).data('active')
        vco = $(this).attr('id').split('_')[0]
        vcoKnob = $('.knob#' + vco + '_pitch')
        $(this).addClass('lit')
        vcoKnob.addClass('lit')
      return
    return

  rotateKnobs = ->
    $('.knob').each ->
      myKnob = new VS.Knob(this)
      degree = myKnob.degreeForMidi($(this).data('midi'), limit)
      $(this).data('rotation', degree)
      myKnob.autoRotate degree, '#' + $(this).attr('id')
      return
    return

  init = ->
    lightButtons()
    rotateKnobs()
    sequences.init()
    return

  init()

  #
  # user actions
  #
  # TODO DRY this up.
  $('#randomize').on 'click tap', (e) ->
    e.preventDefault()

    assignKnobValue = (knob) ->
      randomValue = Math.floor(Math.random() * (127 - 1))
      myKnob = new VS.Knob(knob)
      degree = myKnob.degreeForMidi(randomValue, limit)
      knob.data 'rotation', degree
      knob.data 'midi', randomValue
      myKnob.autoRotate degree, '#' + knob.attr('id')
      myKnob.inputElement.val randomValue
      return

    randomizeKnobs = ->
      $('.volca .knob').each ->
        assignKnobValue($(this))
        return
      return unless midiOut.ready()
      $('#midi-only-controls .knob').each ->
        assignKnobValue($(this))
        return
      return

    randomizeVcoActive = ->
      $('.button').each ->
        vco = $(this).attr('id').split('_')[0]
        randomBoolean = Math.random() >= 0.5
        input = $('input#patch_' + $(this).attr('id').split('_').slice(0, -1).join('_'))
        $(this).data 'active', randomBoolean
        vcoKnob = $('.knob#' + vco + '_pitch')
        if randomBoolean != $(this).hasClass('lit')
          $(this).toggleClass('lit')
          vcoKnob.toggleClass('lit')
        input.prop 'checked', randomBoolean
        return
      return

    randomizeCheckboxes = ->
      $('.bottom-row label').each ->
        return unless $('input#' + $(this).attr('for')).is(':checkbox')
        myInput = $('input#' + $(this).attr('for'))
        randomBoolean = Math.random() >= 0.5
        light = $(this).find('span').find('div')
        if randomBoolean then light.addClass('lit') else light.removeClass('lit')
        myInput.prop('checked', randomBoolean)
        return
      return

    randomizeVcoGroup = ->
      return unless !sequences.sequencesActive
      items = ['one', 'two', 'three']
      item = items[Math.floor(Math.random() * items.length)]
      $('.light[data-radio]').each ->
        $(this).removeClass('lit')
        $(':radio[value=' + item + ']').prop('checked', false)
        return
      $(':radio[value=' + item + ']').prop('checked', true)
      $('label[for="patch_vco_group_' + item + '"]').find('span .light').addClass('lit')
      return

    randomizeKnobs()
    randomizeVcoActive()
    randomizeCheckboxes()
    randomizeVcoGroup()
    midiOut.syncMidi()
    return

  $('.bottom-row .on-off').on 'click tap', ->
    $(this).find('.light').toggleClass('lit')
    return

  $('.button').on 'click tap', ->
    vco = $(this).attr('id').split('_')[0]
    value = $(this).data('active')
    vcoKnob = $('.knob#' + vco + '_pitch')
    input = $('input#patch_' + $(this).attr('id').split('_').slice(0, -1).join('_'))
    $(this).toggleClass('lit')
    vcoKnob.toggleClass('lit')
    $(this).data('active', !value)
    input.prop('checked', !value)
    return

  $('.knob').on 'mousedown touchstart', (e) ->
    VS.clickedPoint = e.pageY or Math.round(e.originalEvent.touches[0].pageY)
    e.preventDefault()
    e.stopPropagation()
    VS.clicked = true
    VS.activeKnob = new VS.Knob(this)
    sequences.activeNote = null
    knob = $(VS.activeKnob.element)
    knob.data('origin', top: knob.offset().top) if !knob.data('origin')
    return

  $('.knob').mouseenter ->
    midi = $(this).data('midi')
    return false if VS.dragging
    VS.activeKnob = new VS.Knob(this)
    display.update(midi, VS.activeKnob.isPitch, VS.activeKnob.isOctave, false)
    return

  $(document).on 'mousemove touchmove', (e) ->
    VS.dragging = true if VS.clicked
    return unless VS.dragging
    e.preventDefault()
    $('body').css 'cursor', 'ns-resize'
    VS.currentPoint = e.pageY or Math.round(e.originalEvent.touches[0].pageY)
    turnKnob(e)
    sequences.changeSequenceNote(e)
    return

  turnKnob = (e) ->
    return unless VS.activeKnob != null
    degree = VS.activeKnob.rotation + VS.clickedPoint - VS.currentPoint
    if degree > limit
      VS.activeKnob.rotation = limit
      VS.clickedPoint = VS.currentPoint
    if degree < -limit
      VS.activeKnob.rotation = -limit
      VS.clickedPoint = VS.currentPoint
    degree = VS.activeKnob.rotation + VS.clickedPoint - VS.currentPoint
    if VS.currentPoint != VS.clickedPoint or degree == -limit or degree == limit
      VS.activeKnob.rotate(degree)
      midi = Math.round(63.5 / limit * degree + 63.5)
      if midiOut.ready()
        midiOut.output.sendControlChange(
          $(VS.activeKnob.element).data('control-number'),
          midi,
          midiOut.channel
        )
      VS.activeKnob.inputElement.val(midi)
      display.update(midi, VS.activeKnob.isPitch, VS.activeKnob.isOctave, false)
    return

  $(document).on 'mouseup touchend', (e) ->
    VS.clicked = false
    tapKnob() unless VS.dragging
    return unless VS.dragging
    VS.dragging = false
    VS.currentPoint = e.pageY or Math.round(e.originalEvent.changedTouches[0].pageY)
    $('body').css 'cursor', 'default'
    endKnobTurn()
    sequences.endNoteChange()
    return

  endKnobTurn = ->
    return unless VS.activeKnob != null
    currentAngle = VS.activeKnob.rotation + VS.clickedPoint - VS.currentPoint
    if VS.activeKnob.rotation > limit
      VS.activeKnob.rotation = limit
      VS.currentPoint = VS.clickedPoint
    if VS.activeKnob.rotation < -limit
      VS.activeKnob.rotation = -limit
      VS.currentPoint = VS.clickedPoint
    $(VS.activeKnob.element).data('rotation', currentAngle)
    $(VS.activeKnob.element).data('midi', midi)
    VS.activeKnob = null
    return

  tapKnob = ->
    return unless VS.activeKnob != null and typeof VS.activeKnob == VS.Knob
    display.update(VS.activeKnob.midi, VS.activeKnob.isPitch, false)
    return
  return
