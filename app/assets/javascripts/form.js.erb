$(function() {
  // TODO do page specific scripts the right way
  if ($('body.form').length === 0 )
    return;

  var activeKnob, knob, clickedPoint, midi;
  var display = new Display($('#led'));
  var dragging = false;
  var clicked = false;
  var limit = 140;

  if (midiAvailable) {
    var items = '<option>Midi Device</option>';
    $(WebMidi.outputs).each(function() {
      items += '<option value="' + this.name + '">' + this.name + '</option>';
    });
    $('#midi-device').html(items);
  } else {
    $('#midi-output').hide();
    $('.knob').removeClass('midi-enabled');
  }

  $('#midi-device').change(function(){
    midiOutput = WebMidi.getOutputByName($(this).val());
  });

  $('#midi-channel').change(function(){
    midiChannel = $(this).val();
  });

  $('.knob').each(function() {
    my_knob = new Knob(this);
    degree = my_knob.degreeForMidi($(this).data('midi'), limit);
    $(this).data('rotation', degree);
    my_knob.autoRotate(degree, '#' + $(this).attr('id'));
  });

  $('.bottom-row label').each(function(){
    var myInput = $('input#' + $(this).attr('for'));
    if (myInput.prop('checked')) {
      $(this).find('span').find('div').addClass('lit');
    }
  });

  $('.bottom-row label').mouseup(function(){
    if ($('input#' + $(this).attr('for')).is(':checkbox')) {
      $(this).find('span .light').toggleClass('lit');
    } else {
      $('.light[data-radio]').each(function() {
        $(this).removeClass('lit');
      });
      $(this).find('span .light').addClass('lit');
    }
  });

  $('.button').each(function(){
    var vco, value, vcoKnob, input;
    vco = $(this).attr('id').split('_')[0];
    value = $(this).data('active');
    vcoKnob = $('.knob#' + vco + '_pitch');
    if (value === true) {
      $(this).addClass('lit');
      vcoKnob.addClass('lit');
    }
  });

  $('.button').mouseup(function(){
    var vco, value, vcoKnob, input;
    vco = $(this).attr('id').split('_')[0];
    value = $(this).data('active');
    vcoKnob = $('.knob#' + vco + '_pitch');
    input = $('input#patch_' + $(this).attr('id').split('_').slice(0, -1).join('_'));
    $(this).toggleClass('lit');
    vcoKnob.toggleClass('lit');
    if (value === true) {
      $(this).data('active', false);
      input.prop('checked', false);
    } else {
      $(this).data('active', true);
      input.prop('checked', true);
    }
  });

  $('.knob').mousedown(function(e) {
    clickedPoint = e.pageY;
    e.preventDefault();
    e.stopPropagation();
    clicked = true;
    activeKnob = new Knob(this);
    knob = $(activeKnob.element);
    if (!knob.data('origin')) knob.data('origin', {
      top: knob.offset().top
    });
  })

  $('.knob').mouseenter(function(){
    midi = $(this).data('midi');
    if (dragging)
      return false;
    activeKnob = new Knob(this);
    display.update(midi, activeKnob.isPitch);
  });

  $(document).mousemove(function(e) {
    if (clicked === true) {
      dragging = true;
    }
    if (dragging) {
      e.preventDefault();
      var degree, currentPoint;
      $('body').css('cursor', 'ns-resize');
      currentPoint = e.pageY;
      degree = activeKnob.rotation + (clickedPoint - currentPoint);
      if (degree > limit) {
        activeKnob.rotation = limit;
        clickedPoint = currentPoint;
      }
      if (degree < -limit) {
        activeKnob.rotation = -limit;
        clickedPoint = currentPoint;
      }
      degree = activeKnob.rotation + (clickedPoint - currentPoint);
      if (currentPoint !== clickedPoint || degree === -limit || degree === limit) {
        activeKnob.rotate(degree);
        midi = Math.round(((63.5 / limit) * degree) + 63.5);
        if (typeof midiOutput !== 'undefined' && typeof midiChannel !== 'undefined') {
            midiOutput.sendControlChange(
              $(activeKnob.element).data('control-number'),
              midi,
              midiChannel
            )
        }
        activeKnob.inputElement.val(midi);
        display.update(midi, activeKnob.isPitch, activeKnob.isOctave);
      }
    }
  });

  $(document).mouseup(function(e) {
    clicked = false;
    if (dragging) {
      dragging = false;
      var currentPoint = e.pageY;
      $('body').css('cursor', 'default');

      var currentAngle = activeKnob.rotation + (clickedPoint - currentPoint);
      if (activeKnob.rotation > limit) {
        activeKnob.rotation = limit;
        currentPoint = clickedPoint;
      }
      if (activeKnob.rotation < -limit) {
        activeKnob.rotation = -limit;
        currentPoint = clickedPoint;
      }
      $(activeKnob.element).data('rotation', currentAngle);
      $(activeKnob.element).data('midi', midi);
    } else {
      if (typeof activeKnob === Knob)
      display.update(activeKnob.midi, activeKnob.isPitch);
    }
  });


  // console.log( "69BOT - midiAvailable: " + midiAvailable);
  // if (midiAvailable === true) {
  //   $('.collapse').collapse('toggle');
  // }


  function touchHandler(event)
    {
        var touches = event.changedTouches,
            first = touches[0],
            type = "";
        switch(event.type)
        {
            case "touchstart": type = "mousedown"; break;
            case "touchmove":  type = "mousemove"; break;
            case "touchend":   type = "mouseup";   break;
            default:           return;
        }

        // initMouseEvent(type, canBubble, cancelable, view, clickCount,
        //                screenX, screenY, clientX, clientY, ctrlKey,
        //                altKey, shiftKey, metaKey, button, relatedTarget);

        var simulatedEvent = document.createEvent("MouseEvent");
        simulatedEvent.initMouseEvent(type, true, true, window, 1,
                                      first.screenX, first.screenY,
                                      first.clientX, first.clientY, false,
                                      false, false, false, 0/*left*/, null);

        first.target.dispatchEvent(simulatedEvent);
        event.preventDefault();
    }

  function init()
    {
        document.addEventListener("touchstart", touchHandler, true);
        document.addEventListener("touchmove", touchHandler, true);
        document.addEventListener("touchend", touchHandler, true);
        document.addEventListener("touchcancel", touchHandler, true);
    }

  init();
});
