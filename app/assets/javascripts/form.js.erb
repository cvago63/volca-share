$(function() {
  // TODO do page specific scripts the right way
  if ($('body.form').length === 0 )
    return;

  var activeKnob, knob, clickedPoint, midi;
  var display = new Display($('#led'));
  var dragging = false;
  var clicked = false;
  var limit = 140;

  var midiOut = new MidiOut;

  $('#midi-device').change(function(){
    midiOut.changeOutput(this);
    midiOut.enableSync();
  });

  $('#midi-channel').change(function(){
    midiOut.changeChannel(this);
    midiOut.enableSync();
  });

  $('#sync').on('click tap', function(){
    $('.knob').each(function(){
      if (midiOut.ready()) {
          midiOut.output.sendControlChange(
            $(this).data('control-number'),
            $(this).data('midi'),
            midiOut.channel
          )
      }
    });
  });

  $('.knob').each(function() {
    my_knob = new Knob(this);
    degree = my_knob.degreeForMidi($(this).data('midi'), limit);
    $(this).data('rotation', degree);
    my_knob.autoRotate(degree, '#' + $(this).attr('id'));
  });

  // TODO DRY this up.
  $('#randomize').on('click tap', function(e){
    e.preventDefault();
    // KNOBS
    $('.knob').each(function() {
      randomValue = Math.floor(Math.random() * (127 - 1));
      my_knob = new Knob(this);
      degree = my_knob.degreeForMidi(randomValue, limit);
      $(this).data('rotation', degree);
      $(this).data('midi', randomValue);
      my_knob.autoRotate(degree, '#' + $(this).attr('id'));
      my_knob.inputElement.val(randomValue);
    });

    // VCO ACTIVE
    $('.button').each(function(){
      var vco, value, vcoKnob, input;
      vco = $(this).attr('id').split('_')[0];
      randomValue = Math.random() >= 0.5;
      input = $('input#patch_' + $(this).attr('id').split('_').slice(0, -1).join('_'));
      $(this).data('active', randomValue);
      vcoKnob = $('.knob#' + vco + '_pitch');
      if (randomValue) {
        $(this).addClass('lit');
        vcoKnob.addClass('lit');
        input.prop('checked', true);
      } else {
        $(this).removeClass('lit');
        vcoKnob.removeClass('lit');
        input.prop('checked', false);
      }
    });

    // CHECKBOXES
    $('.bottom-row label').each(function(){
      if ($('input#' + $(this).attr('for')).is(':checkbox')) {
        var myInput = $('input#' + $(this).attr('for'));
        randomValue = Math.random() >= 0.5;
        if (randomValue) {
          $(this).find('span').find('div').addClass('lit');
          myInput.prop('checked', true);
        } else {
          $(this).find('span').find('div').removeClass('lit');
          myInput.prop('checked', false);
        }
      }
    });

    // VCO GROUP
    var items = ['one', 'two', 'three'];
    var item = items[Math.floor(Math.random()*items.length)];
    $('.light[data-radio]').each(function() {
      $(this).removeClass('lit');
      $(":radio[value=" + item + "]").prop('checked', false);
    });
    $(":radio[value=" + item + "]").prop('checked', true);
    $('label[for="patch_vco_group_' + item + '"]').find('span .light').addClass('lit');
  });

  $('.bottom-row label').each(function(){
    var myInput = $('input#' + $(this).attr('for'));
    if (myInput.prop('checked')) {
      $(this).find('span').find('div').addClass('lit');
    }
  });

  $('.bottom-row label').on('click tap', function(){
    if ($('input#' + $(this).attr('for')).is(':checkbox')) {
      $(this).find('span .light').toggleClass('lit');
    } else {
      $('.light[data-radio]').each(function() {
        $(this).removeClass('lit');
      });
      $(this).find('span .light').addClass('lit');
    }
  });

  $('.button').each(function(){
    var vco, value, vcoKnob;
    vco = $(this).attr('id').split('_')[0];
    value = $(this).data('active');
    vcoKnob = $('.knob#' + vco + '_pitch');
    if (value === true) {
      $(this).addClass('lit');
      vcoKnob.addClass('lit');
    }
  });

  $('.button').on('click tap',function(){
    var vco, value, vcoKnob, input;
    vco = $(this).attr('id').split('_')[0];
    value = $(this).data('active');
    vcoKnob = $('.knob#' + vco + '_pitch');
    input = $('input#patch_' + $(this).attr('id').split('_').slice(0, -1).join('_'));
    $(this).toggleClass('lit');
    vcoKnob.toggleClass('lit');
    if (value === true) {
      $(this).data('active', false);
      input.prop('checked', false);
    } else {
      $(this).data('active', true);
      input.prop('checked', true);
    }
  });

  $('.knob').on('mousedown touchstart',function(e) {
    clickedPoint = e.pageY || Math.round(e.originalEvent.touches[0].pageY);
    e.preventDefault();
    e.stopPropagation();
    clicked = true;
    activeKnob = new Knob(this);
    knob = $(activeKnob.element);
    if (!knob.data('origin')) knob.data('origin', {
      top: knob.offset().top
    });
  })

  $('.knob').mouseenter(function(){
    midi = $(this).data('midi');
    if (dragging)
      return false;
    activeKnob = new Knob(this);
    display.update(midi, activeKnob.isPitch, activeKnob.isOctave);
  });

  $(document).on('mousemove touchmove',function(e) {
    if (clicked === true) {
      dragging = true;
    }
    if (dragging) {
      e.preventDefault();
      var degree, currentPoint;
      $('body').css('cursor', 'ns-resize');
      currentPoint = e.pageY || Math.round(e.originalEvent.touches[0].pageY);
      degree = activeKnob.rotation + (clickedPoint - currentPoint);
      if (degree > limit) {
        activeKnob.rotation = limit;
        clickedPoint = currentPoint;
      }
      if (degree < -limit) {
        activeKnob.rotation = -limit;
        clickedPoint = currentPoint;
      }
      degree = activeKnob.rotation + (clickedPoint - currentPoint);
      if (currentPoint !== clickedPoint || degree === -limit || degree === limit) {
        activeKnob.rotate(degree);
        midi = Math.round(((63.5 / limit) * degree) + 63.5);
        if (midiOut.ready()) {
            midiOut.output.sendControlChange(
              $(activeKnob.element).data('control-number'),
              midi,
              midiOut.channel
            )
        }
        activeKnob.inputElement.val(midi);
        display.update(midi, activeKnob.isPitch, activeKnob.isOctave);
      }
    }
  });

  $(document).on('mouseup touchend', function(e) {
    clicked = false;
    if (dragging) {
      dragging = false;
      var currentPoint = e.pageY || Math.round(e.originalEvent.changedTouches[0].pageY);
      $('body').css('cursor', 'default');

      var currentAngle = activeKnob.rotation + (clickedPoint - currentPoint);
      if (activeKnob.rotation > limit) {
        activeKnob.rotation = limit;
        currentPoint = clickedPoint;
      }
      if (activeKnob.rotation < -limit) {
        activeKnob.rotation = -limit;
        currentPoint = clickedPoint;
      }
      $(activeKnob.element).data('rotation', currentAngle);
      $(activeKnob.element).data('midi', midi);
    } else {
      if (typeof activeKnob === Knob)
      display.update(activeKnob.midi, activeKnob.isPitch);
    }
  });
});
